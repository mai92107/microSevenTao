spring.application.name=gateway-service
spring.zipkin.base-url=http://127.0.0.1:9411/

server.port=8060
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.instance.hostname=127.0.0.1
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

logging.level.org.springframework.cloud.gateway=DEBUG
logging.level.org.springframework.web=DEBUG

spring.cloud.discovery.client.health-indicator.enabled=false
eureka.client.initial-instance-info-replication-interval-seconds=10

eureka.instance.lease-renewal-interval-in-seconds=5
eureka.instance.lease-expiration-duration-in-seconds=10

spring.cloud.loadbalancer.retry.enabled=true

management.endpoints.web.exposure.include=*

spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedOrigins=http://localhost:3000
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedMethods=GET,POST,PUT,DELETE,OPTIONS
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedHeaders=*
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowCredentials=true


spring.cloud.gateway.routes[0].id=room-admin-service
spring.cloud.gateway.routes[0].uri=lb://room-admin-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/room-admin/**
spring.cloud.gateway.routes[0].filters[0]=CircuitBreaker=circuitBreakerRoomAdmin

spring.cloud.gateway.routes[1].id=hotel-admin-service
spring.cloud.gateway.routes[1].uri=lb://hotel-admin-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/hotel-admin/**
spring.cloud.gateway.routes[1].filters[0]=CircuitBreaker=circuitBreakerHotelAdmin

spring.cloud.gateway.routes[2].id=comment-service
spring.cloud.gateway.routes[2].uri=lb://comment-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/comment/**
spring.cloud.gateway.routes[2].filters[0]=CircuitBreaker=circuitBreakerComment

spring.cloud.gateway.routes[3].id=order-user-service
spring.cloud.gateway.routes[3].uri=lb://order-user-service
spring.cloud.gateway.routes[3].predicates[0]=Path=/order-user/**
spring.cloud.gateway.routes[3].filters[0]=CircuitBreaker=circuitBreakerOrder

spring.cloud.gateway.routes[4].id=hotel-user-service
spring.cloud.gateway.routes[4].uri=lb://hotel-user-service
spring.cloud.gateway.routes[4].predicates[0]=Path=/hotel-user/**
spring.cloud.gateway.routes[4].filters[0]=CircuitBreaker=circuitBreakerHotel

spring.cloud.gateway.routes[6].id=room-user-service
spring.cloud.gateway.routes[6].uri=lb://room-user-service
spring.cloud.gateway.routes[6].predicates[0]=Path=/room-user/**
spring.cloud.gateway.routes[6].filters[0]=CircuitBreaker=circuitBreakerRoom

spring.cloud.gateway.routes[5].id=user-service
spring.cloud.gateway.routes[5].uri=lb://user-service
spring.cloud.gateway.routes[5].predicates[0]=Path=/user/**
spring.cloud.gateway.routes[5].filters[0]=CircuitBreaker=circuitBreakerUser


# Resilience4j Circuit Breaker

resilience4j.circuitbreaker.instances.circuitBreakerRoomAdmin.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.circuitBreakerRoomAdmin.slidingWindowSize=10
resilience4j.circuitbreaker.instances.circuitBreakerRoomAdmin.failureRateThreshold=40
resilience4j.circuitbreaker.instances.circuitBreakerRoomAdmin.waitDurationInOpenState=10000

resilience4j.circuitbreaker.instances.circuitBreakerHotelAdmin.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.circuitBreakerHotelAdmin.slidingWindowSize=10
resilience4j.circuitbreaker.instances.circuitBreakerHotelAdmin.failureRateThreshold=40
resilience4j.circuitbreaker.instances.circuitBreakerHotelAdmin.waitDurationInOpenState=10000

resilience4j.circuitbreaker.instances.circuitBreakerComment.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.circuitBreakerComment.slidingWindowSize=10
resilience4j.circuitbreaker.instances.circuitBreakerComment.failureRateThreshold=40
resilience4j.circuitbreaker.instances.circuitBreakerComment.waitDurationInOpenState=10000

resilience4j.circuitbreaker.instances.circuitBreakerOrder.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.circuitBreakerOrder.slidingWindowSize=10
resilience4j.circuitbreaker.instances.circuitBreakerOrder.failureRateThreshold=40
resilience4j.circuitbreaker.instances.circuitBreakerOrder.waitDurationInOpenState=10000

resilience4j.circuitbreaker.instances.circuitBreakerHotel.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.circuitBreakerHotel.slidingWindowSize=10
resilience4j.circuitbreaker.instances.circuitBreakerHotel.failureRateThreshold=40
resilience4j.circuitbreaker.instances.circuitBreakerHotel.waitDurationInOpenState=10000

resilience4j.circuitbreaker.instances.circuitBreakerRoom.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.circuitBreakerRoom.slidingWindowSize=10
resilience4j.circuitbreaker.instances.circuitBreakerRoom.failureRateThreshold=40
resilience4j.circuitbreaker.instances.circuitBreakerRoom.waitDurationInOpenState=10000

resilience4j.circuitbreaker.instances.circuitBreakerUser.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.circuitBreakerUser.slidingWindowSize=10
resilience4j.circuitbreaker.instances.circuitBreakerUser.failureRateThreshold=40
resilience4j.circuitbreaker.instances.circuitBreakerUser.waitDurationInOpenState=10000

spring.cloud.gateway.httpclient.connect-timeout=5000

spring.cloud.gateway.httpclient.response-timeout=5000

spring.cloud.gateway.httpclient.pool.max-connections=200

spring.cloud.gateway.httpclient.pool.pending-acquire-timeout=5000
